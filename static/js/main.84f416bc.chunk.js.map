{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","username","id","email","className","alt","src","CardList","robots","map","user","i","key","name","SearchBox","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","fetchRobots","searchField","onSearchChange","isPending","failed","robotFilter","filter","robot","toLowerCase","includes","console","log","Component","connect","state","searchRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","insitalStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84f416bc.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst Card = ({username, id, email}) => {\r\n    return(\r\n        <Fragment> \r\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img alt='Robot' src={`https://robohash.org/${id}?200x200`}></img>\r\n                <h2>{username}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { Fragment } from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n    return (\r\n        <Fragment>\r\n            {robots.map((user, i) =>{\r\n                return(\r\n                    <Card \r\n                        key={robots[i].id}\r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        username={robots[i].username} \r\n                        email={robots[i].email}\r\n\r\n                    />\r\n                )\r\n                })\r\n            }\r\n        </Fragment>\r\n        )\r\n}\r\n\r\nexport default CardList;","import React, { Fragment } from 'react';\r\n\r\nconst SearchBox = ({SearchChange}) => {\r\n    return(\r\n        <Fragment>\r\n            <div className='pa2'>\r\n                <input\r\n                    className='pa3 ba b--green bg-lightest-blue'\r\n                    type='search'\r\n                    placeholder=\"Search Robots\"\r\n                    onChange={SearchChange} />\r\n            </div>\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: `1px solid`, height: `80vh`}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Fragment , Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport { setSearchField, fetchRobots } from '../actions';\r\nimport { connect} from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        searchField: state.searchRobots.searchField,\r\n        isPending: state.fetchRobots.isPending,\r\n        robots: state.fetchRobots.robots,\r\n        error: state.fetchRobots.error,\r\n        failed: state.fetchRobots.failed,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        fetchRobots: () => dispatch(fetchRobots()) \r\n    }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n    // constructor(){\r\n    //     super();\r\n    //     this.state ={\r\n    //         robots: [],\r\n    //     }\r\n    // }\r\n\r\n    // onSearchChange = (event) =>{\r\n    //     this.setState({SearchBox: event.target.value});\r\n    // }\r\n\r\n    componentDidMount(){\r\n        this.props.fetchRobots();\r\n        // fetch(`https://jsonplaceholder.typicode.com/users`)\r\n        // .then(response => response.json())\r\n        // .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    render(){\r\n        const { searchField, onSearchChange, robots, isPending, failed } = this.props;\r\n        const robotFilter = robots.filter(robot =>{\r\n            return robot.username.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        if(failed === true || isPending === true){\r\n            console.log('faile: ' + failed)\r\n            return <h1>Loading</h1>\r\n        }\r\n        else{\r\n            return(\r\n                <Fragment>\r\n                    <div className='tc'>\r\n                        <h1>Robot Friends</h1>\r\n                        <SearchBox SearchChange={onSearchChange} />\r\n                        <Scroll>\r\n                            <CardList robots={robotFilter} />\r\n                        </Scroll>\r\n                    \r\n                    </div>\r\n                </Fragment>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    FEETCH_ROBOTS_FAILED,\r\n    FEETCH_ROBOTS_PENDING,\r\n    FEETCH_ROBOTS_SUCCESS,\r\n} from './constants.js';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const fetchRobots = () => (dispatch) => {\r\n    dispatch({type: FEETCH_ROBOTS_PENDING});\r\n    fetch(`https://jsonplaceholder.typicode.com/users`)\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: FEETCH_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: FEETCH_ROBOTS_FAILED, payload: error}))\r\n} ","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const FEETCH_ROBOTS_PENDING = 'FEETCH_ROBOTS_PENDING';\r\nexport const FEETCH_ROBOTS_SUCCESS = 'FEETCH_ROBOTS_SUCCESS';\r\nexport const FEETCH_ROBOTS_FAILED = 'FEETCH_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    FEETCH_ROBOTS_FAILED,\r\n    FEETCH_ROBOTS_PENDING,\r\n    FEETCH_ROBOTS_SUCCESS,\r\n} from './constants.js';\r\n\r\nconst insitalStateSearch ={\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state = insitalStateSearch, action ={}) =>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots ={\r\n    isPending: true,\r\n    failed: false,\r\n    robots: [],\r\n    error: '',\r\n}\r\n\r\nexport const fetchRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type){\r\n        case FEETCH_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case FEETCH_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case FEETCH_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false, failed: true});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider} from 'react-redux';\nimport { searchRobots, fetchRobots } from './reducers.js';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst rootReducer = combineReducers({searchRobots, fetchRobots });\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}